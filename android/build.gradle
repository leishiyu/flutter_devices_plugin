group 'com.holderzone.flutter_devices_plugin'
version '1.0-SNAPSHOT'
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
        dependencies {
            classpath 'com.android.tools.build:gradle:7.1.2'
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        }
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
//        flatDir {
//            dirs project(':flutter_devices_plugin').file('aarlibs')
//        }
        flatDir {
            dirs 'aarlibs'
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.holderzone.flutter_devices_plugin'
    }

    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 19
    }
    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        compileOnly files("${flutterRoot}/bin/cache/artifacts/engine/android-arm/flutter.jar")
        implementation 'androidx.annotation:annotation:1.7.0'
        testImplementation 'org.mockito:mockito-core:5.0.0'
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

}
dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    compileOnly files("${flutterRoot}/bin/cache/artifacts/engine/android-arm/flutter.jar")
    implementation 'androidx.annotation:annotation:1.7.0'
    testImplementation 'org.mockito:mockito-core:5.0.0'
//    implementation(name:"printer",ext:"aar")
    implementation fileTree(include: ['*.jar',"*.aar"], dir: 'aarlibs')
}
